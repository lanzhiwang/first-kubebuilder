$ kubebuilder create --help
Scaffold a Kubernetes API or webhook.

Usage:
  kubebuilder create [command]

Available Commands:
  api         Scaffold a Kubernetes API
  webhook     Scaffold a webhook for an API resource.

Flags:
  -h, --help   help for create

Use "kubebuilder create [command] --help" for more information about a command.


$ kubebuilder create api --help
Scaffold a Kubernetes API by creating a Resource definition and / or a Controller.

kubebuilder create api will prompt the user asking if it should scaffold the Resource and / or Controller. To only scaffold a Controller for an existing Resource, select "n" for Resource.  To only define the schema for a Resource without writing a Controller, select "n" for Controller.

After the scaffold is written, api will run make on the project.

Usage:
  kubebuilder create api [flags]

Examples:
	# Create a frigates API with Group: ship, Version: v1beta1 and Kind: Frigate
	kubebuilder create api --group ship --version v1beta1 --kind Frigate

	# Edit the API Scheme
	nano api/v1beta1/frigate_types.go

	# Edit the Controller
	nano controllers/frigate/frigate_controller.go

	# Edit the Controller Test
	nano controllers/frigate/frigate_controller_test.go

	# Install CRDs into the Kubernetes cluster using kubectl apply
	make install

	# Regenerate code and run against the Kubernetes cluster configured by ~/.kube/config
	make run


Flags:
      --controller       if set, generate the controller without prompting the user (default true)
      --example          if true an example reconcile body should be written while scaffolding a resource. (default true)
      --force            attempt to create resource even if it already exists
      --group string     resource Group
  -h, --help             help for api
      --kind string      resource Kind
      --make             if true, run make after generating files (default true)
      --namespaced       resource is namespaced (default true)
      --resource         if set, generate the resource without prompting the user (default true)
      --version string   resource Version

$ kubebuilder create webhook --help
Scaffold a webhook for an API resource. You can choose to scaffold defaulting, validating and (or) conversion webhooks.

Usage:
  kubebuilder create webhook [flags]

Examples:
	# Create defaulting and validating webhooks for CRD of group crew, version v1 and kind FirstMate.
	kubebuilder create webhook --group crew --version v1 --kind FirstMate --defaulting --programmatic-validation

	# Create conversion webhook for CRD of group crew, version v1 and kind FirstMate.
	kubebuilder create webhook --group crew --version v1 --kind FirstMate --conversion


Flags:
      --conversion                if set, scaffold the conversion webhook
      --defaulting                if set, scaffold the defaulting webhook
      --group string              resource Group
  -h, --help                      help for webhook
      --kind string               resource Kind
      --programmatic-validation   if set, scaffold the validating webhook
      --resource string           resource Resource
      --version string            resource Version
$

#########################################################

localhost:first-operator huzhi$ kubebuilder create api --group ship --version v1beta1 --kind Frigate
Create Resource [y/n]
y
Create Controller [y/n]
y
Writing scaffold for you to edit...
api/v1beta1/frigate_types.go
controllers/frigate_controller.go
Running make:
$ make
/Users/huzhi/go/bin/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."
Error: go [list -e -json -compiled=true -test=false -export=false -deps=true -find=false -tags ignore_autogenerated -- ./...]: exit status 1: go: github.com/lanzhiwang/first-operator/controllers: package github.com/go-logr/logr imported from implicitly required module; to add missing requirements, run:
  go get github.com/go-logr/logr@v0.1.0

Usage:
  controller-gen [flags]

Examples:
  # Generate RBAC manifests and crds for all types under apis/,
  # outputting crds to /tmp/crds and everything else to stdout
  controller-gen rbac:roleName=<role name> crd paths=./apis/... output:crd:dir=/tmp/crds output:stdout

  # Generate deepcopy/runtime.Object implementations for a particular file
  controller-gen object paths=./apis/v1beta1/some_types.go

  # Generate OpenAPI v3 schemas for API packages and merge them into existing CRD manifests
  controller-gen schemapatch:manifests=./manifests output:dir=./manifests paths=./pkg/apis/...

  # Run all the generators for a given project
  controller-gen paths=./apis/...

  # Explain the markers for generating CRDs, and their arguments
  controller-gen crd -ww


Flags:
  -h, --detailed-help count   print out more detailed help
                              (up to -hhh for the most detailed output, or -hhhh for json output)
      --help                  print out usage and a summary of options
      --version               show version
  -w, --which-markers count   print out all markers available with the requested generators
                              (up to -www for the most detailed output, or -wwww for json output)


Options


generators

+webhook                                                                                                  package  generates (partial) {Mutating,Validating}WebhookConfiguration objects.
+schemapatch:manifests=<string>[,maxDescLen=<int>]                                                        package  patches existing CRDs with new schemata.
+rbac:roleName=<string>                                                                                   package  generates ClusterRole objects.
+object[:headerFile=<string>][,year=<string>]                                                             package  generates code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.
+crd[:crdVersions=<[]string>][,maxDescLen=<int>][,preserveUnknownFields=<bool>][,trivialVersions=<bool>]  package  generates CustomResourceDefinition objects.


generic

+paths=<[]string>  package  represents paths and go-style path patterns to use as package roots.


output rules (optionally as output:<generator>:...)

+output:artifacts[:code=<string>],config=<string>  package  outputs artifacts to different locations, depending on whether they're package-associated or not.
+output:dir=<string>                               package  outputs each artifact to the given directory, regardless of if it's package-associated or not.
+output:none                                       package  skips outputting anything.
+output:stdout                                     package  outputs everything to standard-out, with no separation.

run `controller-gen object:headerFile=hack/boilerplate.go.txt paths=./... -w` to see all available markers, or `controller-gen object:headerFile=hack/boilerplate.go.txt paths=./... -h` for usage
make: *** [generate] Error 1
2021/05/13 15:19:49 failed to create API: exit status 2


localhost:first-operator huzhi$ go get github.com/go-logr/logr@v0.1.0
localhost:first-operator huzhi$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   go.mod
	modified:   help/kubebuilder-create.txt

no changes added to commit (use "git add" and/or "git commit -a")
localhost:first-operator huzhi$
localhost:first-operator huzhi$ git diff go.mod
diff --git a/go.mod b/go.mod
index c1a79ac..57ba0f0 100644
--- a/go.mod
+++ b/go.mod
@@ -3,6 +3,7 @@ module github.com/lanzhiwang/first-operator
 go 1.13

 require (
+       github.com/go-logr/logr v0.1.0 // indirect
        k8s.io/apimachinery v0.17.2
        k8s.io/client-go v0.17.2
        sigs.k8s.io/controller-runtime v0.5.0
localhost:first-operator huzhi$



localhost:first-operator huzhi$ kubebuilder create api --group ship --version v1beta1 --kind Frigate
Create Resource [y/n]
y
Create Controller [y/n]
y
Writing scaffold for you to edit...
api/v1beta1/frigate_types.go
controllers/frigate_controller.go
Running make:
$ make
/Users/huzhi/go/bin/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."
go fmt ./...
go vet ./...
go: github.com/lanzhiwang/first-operator/controllers: package github.com/onsi/ginkgo imported from implicitly required module; to add missing requirements, run:
	go get github.com/onsi/ginkgo@v1.11.0
go: github.com/lanzhiwang/first-operator/controllers: package github.com/onsi/gomega imported from implicitly required module; to add missing requirements, run:
	go get github.com/onsi/gomega@v1.8.1
make: *** [vet] Error 1
2021/05/13 16:41:03 failed to create API: exit status 2
localhost:first-operator huzhi$
localhost:first-operator huzhi$
localhost:first-operator huzhi$ go get github.com/onsi/ginkgo@v1.11.0
localhost:first-operator huzhi$ go get github.com/onsi/gomega@v1.8.1
localhost:first-operator huzhi$
localhost:first-operator huzhi$ kubebuilder create api --group ship --version v1beta1 --kind Frigate
Create Resource [y/n]
y
Create Controller [y/n]
y
2021/05/13 16:43:01 failed to create API: API resource already exists
localhost:first-operator huzhi$
localhost:first-operator huzhi$



localhost:first-operator huzhi$ kubebuilder create api --group ship --version v1beta1 --kind Frigate
Create Resource [y/n]
y
Create Controller [y/n]
y
Writing scaffold for you to edit...
api/v1beta1/frigate_types.go
controllers/frigate_controller.go
Running make:
$ make
/Users/huzhi/go/bin/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."
go fmt ./...
go vet ./...
go build -o bin/manager main.go
localhost:first-operator huzhi$
localhost:first-operator huzhi$
localhost:first-operator huzhi$
localhost:first-operator huzhi$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   go.mod
	modified:   help/kubebuilder-create.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   PROJECT
	modified:   main.go

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	api/
	config/crd/
	config/rbac/frigate_editor_role.yaml
	config/rbac/frigate_viewer_role.yaml
	config/samples/
	controllers/

localhost:first-operator huzhi$
localhost:first-operator huzhi$ git diff PROJECT
diff --git a/PROJECT b/PROJECT
index ecdff3c..f4eb4fe 100644
--- a/PROJECT
+++ b/PROJECT
@@ -1,3 +1,7 @@
 domain: example.org
 repo: github.com/lanzhiwang/first-operator
+resources:
+- group: ship
+  kind: Frigate
+  version: v1beta1
 version: "2"
localhost:first-operator huzhi$
localhost:first-operator huzhi$ git diff main.go
diff --git a/main.go b/main.go
index 69d5992..b14390a 100644
--- a/main.go
+++ b/main.go
@@ -25,6 +25,9 @@ import (
        _ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
        ctrl "sigs.k8s.io/controller-runtime"
        "sigs.k8s.io/controller-runtime/pkg/log/zap"
+
+       shipv1beta1 "github.com/lanzhiwang/first-operator/api/v1beta1"
+       "github.com/lanzhiwang/first-operator/controllers"
        // +kubebuilder:scaffold:imports
 )

@@ -36,6 +39,7 @@ var (
 func init() {
        _ = clientgoscheme.AddToScheme(scheme)

+       _ = shipv1beta1.AddToScheme(scheme)
        // +kubebuilder:scaffold:scheme
 }

@@ -62,6 +66,14 @@ func main() {
                os.Exit(1)
        }

+       if err = (&controllers.FrigateReconciler{
+               Client: mgr.GetClient(),
+               Log:    ctrl.Log.WithName("controllers").WithName("Frigate"),
+               Scheme: mgr.GetScheme(),
+       }).SetupWithManager(mgr); err != nil {
+               setupLog.Error(err, "unable to create controller", "controller", "Frigate")
+               os.Exit(1)
+       }
        // +kubebuilder:scaffold:builder

        setupLog.Info("starting manager")
localhost:first-operator huzhi$
localhost:first-operator huzhi$ tree -a .
.
├── .git
├── .gitignore
├── Dockerfile
├── Makefile
├── PROJECT
├── api
│   └── v1beta1
│       ├── frigate_types.go
│       ├── groupversion_info.go
│       └── zz_generated.deepcopy.go
├── bin
│   └── manager
├── config
│   ├── certmanager
│   │   ├── certificate.yaml
│   │   ├── kustomization.yaml
│   │   └── kustomizeconfig.yaml
│   ├── crd
│   │   ├── kustomization.yaml
│   │   ├── kustomizeconfig.yaml
│   │   └── patches
│   │       ├── cainjection_in_frigates.yaml
│   │       └── webhook_in_frigates.yaml
│   ├── default
│   │   ├── kustomization.yaml
│   │   ├── manager_auth_proxy_patch.yaml
│   │   ├── manager_webhook_patch.yaml
│   │   └── webhookcainjection_patch.yaml
│   ├── manager
│   │   ├── kustomization.yaml
│   │   └── manager.yaml
│   ├── prometheus
│   │   ├── kustomization.yaml
│   │   └── monitor.yaml
│   ├── rbac
│   │   ├── auth_proxy_client_clusterrole.yaml
│   │   ├── auth_proxy_role.yaml
│   │   ├── auth_proxy_role_binding.yaml
│   │   ├── auth_proxy_service.yaml
│   │   ├── frigate_editor_role.yaml
│   │   ├── frigate_viewer_role.yaml
│   │   ├── kustomization.yaml
│   │   ├── leader_election_role.yaml
│   │   ├── leader_election_role_binding.yaml
│   │   └── role_binding.yaml
│   ├── samples
│   │   └── ship_v1beta1_frigate.yaml
│   └── webhook
│       ├── kustomization.yaml
│       ├── kustomizeconfig.yaml
│       └── service.yaml
├── controllers
│   ├── frigate_controller.go
│   └── suite_test.go
├── go.mod
├── go.sum
├── hack
│   └── boilerplate.go.txt
├── help
│   ├── controller-gen.txt
│   ├── kubebuilder-create.txt
│   ├── kubebuilder-init.txt
│   ├── kubebuilder.txt
│   └── makefile.txt
└── main.go

76 directories, 119 files
localhost:first-operator huzhi$



localhost:first-operator huzhi$ kubebuilder create api --group ship --version v1beta1 --kind Kafka
Create Resource [y/n]
y
Create Controller [y/n]
y
Writing scaffold for you to edit...
api/v1beta1/kafka_types.go
controllers/kafka_controller.go
Running make:
$ make
/Users/huzhi/go/bin/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."
go fmt ./...
go vet ./...
go build -o bin/manager main.go
localhost:first-operator huzhi$
localhost:first-operator huzhi$
localhost:first-operator huzhi$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   PROJECT
	modified:   api/v1beta1/zz_generated.deepcopy.go
	modified:   config/crd/kustomization.yaml
	modified:   controllers/suite_test.go
	modified:   main.go

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	api/v1beta1/kafka_types.go
	config/crd/patches/cainjection_in_kafkas.yaml
	config/crd/patches/webhook_in_kafkas.yaml
	config/rbac/kafka_editor_role.yaml
	config/rbac/kafka_viewer_role.yaml
	config/samples/ship_v1beta1_kafka.yaml
	controllers/kafka_controller.go

no changes added to commit (use "git add" and/or "git commit -a")
localhost:first-operator huzhi$
localhost:first-operator huzhi$
localhost:first-operator huzhi$ git diff main.go
diff --git a/main.go b/main.go
index b14390a..eb752d6 100644
--- a/main.go
+++ b/main.go
@@ -74,6 +74,14 @@ func main() {
                setupLog.Error(err, "unable to create controller", "controller", "Frigate")
                os.Exit(1)
        }
+       if err = (&controllers.KafkaReconciler{
+               Client: mgr.GetClient(),
+               Log:    ctrl.Log.WithName("controllers").WithName("Kafka"),
+               Scheme: mgr.GetScheme(),
+       }).SetupWithManager(mgr); err != nil {
+               setupLog.Error(err, "unable to create controller", "controller", "Kafka")
+               os.Exit(1)
+       }
        // +kubebuilder:scaffold:builder

        setupLog.Info("starting manager")
localhost:first-operator huzhi$















